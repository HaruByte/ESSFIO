/**
 * Execute this code using cronjob.
 * I recommend you to use Alwaysdata because,
 * it's the coolest hosting imo.
 * 
 * @file
 * @author AozoraDev
 */

const fs = require("fs");
const create = require("./create.js");

const { HashAlgorithm, hammingDistance } = require("img-hasher");
require("dotenv").config();
require("./utils/console.js");

// Since "source" deprecated, i'll use ShareX server to upload the image.
// Thanks, sxcu.net
const sxcuPath = "configs/uploader.sxcu";
const sxcu = (fs.existsSync(sxcuPath))
    ? JSON.parse(fs.readFileSync(sxcuPath, { encoding: "utf8" }))
    : null;

// Data for current episode.
// Auto-generated by create.js
const dataPath = "configs/data.json";
let data = (fs.existsSync(dataPath))
    ? JSON.parse(fs.readFileSync(dataPath, { encoding: "utf8" }))
    : null;

// Main Function
(main = async () => {
    // Make sure data.json and uploader sxcu are exist.
    if (!data || !sxcu) {
        console.error("Data file or sxcu file not exist. Exiting...");
        process.exit(1);
    }
    
    const episodeWithPad = data.current_episode.toString().padStart(2, "0"); // XX
    const frameWithPad = data.current_frame.toString().padStart(4, "0"); // XXXX
    
    // If all frames are published, call create.js to create new data.json for the next episode.
    // If no more episode, end program.
    if (data.current_frame > data.max_frame) {
        console.warn("Episode " + episodeWithPad + " is completed! Checking new anime...");
        
        // No more episode available, end the program.
        if (data.current_episode >= data.max_episode) {
            console.log("No more episode available. I think that's the end.");
            process.exit(0);
        }
        
        // Still has more episode (maybe), call create to create new data.json
        create(data.current_episode + 1, data.max_episode);
        // Update data variable
        data = JSON.parse(fs.readFileSync(dataPath, { encoding: "utf8" }));
        // Then call main, ofc.
        main();
        return;
    }
    
    const fileName = `${episodeWithPad}_${frameWithPad}.jpeg`; // Frame file format: XX_YYYY.jpeg
    const framePath = `frames/${fileName}`;
    const formData = new FormData();
    const sxcuData = new FormData();
    
    try {
        console.log(`Episode ${episodeWithPad} - Frame ${data.current_frame}/${data.max_frame} is publishing...`);
        
        // If current frame file is missing, call main again to try to post another frame.
        if (!fs.existsSync(framePath)) {
            console.warn(fileName + " is not exist. Trying another next frame...");
            
            // Update data variable
            updateData(data, dataPath);
            data = JSON.parse(fs.readFileSync(dataPath, { encoding: "utf8" }));
            
            main();
            return;
        }
        
        // For sxcu
        const file = fs.readFileSync(framePath);
        sxcuData.append(sxcu.FileFormName, new Blob([file]), fileName);
        if (sxcu.Arguments) for (const prop in sxcu.Arguments) {
            sxcuData.append(prop, sxcu.Arguments[prop]);
        }
        
        // Frames duplication detection
        
        
        // Upload frame file to ShareX server
        const sxRes = await fetch(sxcu.RequestURL, {
            method: sxcu.RequestMethod || "POST",
            body: sxcuData
        }).then(r => r.json());
        // sxRes should throw error, but this one is just in case.
        if (!sxRes.url) throw new Error("No image url.");
        
        // Caption for post
        const caption = 
            `Episode ${episodeWithPad}` // Episode
            + " - "
            + `Frame ${data.current_frame} out of ${data.max_frame}\n` // Frame
            + `#ESSFIOEPS${data.current_episode}`; // Unique tag
        
        // for Facebook
        const published = (process.env.PUBLISHED != undefined)
            ? String(process.env.PUBLISHED) // For debugging because it will always false, otherwise if you change it to true.
            : "true"; // PUBLISHED not exist or null, just use true.
        
        formData.append("access_token", process.env.TOKEN); // Facebook Page access token
        formData.append("published", published);
        formData.append("url", sxRes.url + ".jpeg");
        formData.append("caption", caption);
        
        // Create new feed on Facebook Page
        const res = await fetch(`https://graph.facebook.com/v18.0/me/photos`, {
            body: formData,
            method: "post"
        }).then(r => r.json());
        if (res.error) throw new Error(res.error.message);
        
        console.log(`Episode ${episodeWithPad} - Frame ${data.current_frame}/${data.max_frame} published!`);
        if (formData.get("published") == "false") console.log("Nah jk. It's not published lol.");
        
        // Update data
        updateData(data, dataPath);
        // Delete the current frame file
        fs.unlinkSync(framePath);
    } catch (err) {
        console.error(err.message);
        process.exit(1);
    }
})();

/**
 * Plus 1 the current frame and then save the data.json file.
 * 
 * @param {Object} data - Data object that generated from create.js
 * @param {string} dataPath - Path to save the new data.json
 */
function updateData(data, dataPath) {
    data.current_frame++;
    fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
}