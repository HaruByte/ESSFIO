const fs = require("fs");
const create = require("./create.js");
require("dotenv").config();

// Since "source" deprecated, i'll use ShareX server to upload the image.
// Thanks, sxcu.net
const sxcuPath = __dirname + "/configs/uploader.sxcu";
const sxcu = (fs.existsSync(sxcuPath))
    ? JSON.parse(fs.readFileSync(sxcuPath, { encoding: "utf8" }))
    : null;

// Execute the main function
main();

// Main Function
async function main() {
    // Data for current episode.
    // Auto-generated by create.js
    const dataPath = __dirname + "/configs/data.json";
    const data = (fs.existsSync(dataPath))
        ? JSON.parse(fs.readFileSync(dataPath, { encoding: "utf8" }))
        : null;
    
    // Check if data and sxcu are exist
    if (!data || !sxcu) {
        console.error("Data file or sxcu file not exist. Exiting...");
        process.exit(1);
    }
    
    let current_frame = data.current_frame;
    const episodeWithPad = data.current_episode.toString().padStart(2, "0"); // Output example: XX
    const frameWithPad = current_frame.toString().padStart(4, "0"); // Output example: XXXX
    
    // Check if all frames posted.
    // If that happends, call create.js with parameter (data.current_episode + 1).
    // But make sure the anime file is exist
    if (data.current_frame > data.max_frame) {
        console.log("Episode " + episodeWithPad + " is completed! Checking new anime...");
        
        // Check for another episode
        if (data.current_episode >= data.max_episode) {
            console.log("No more episode available. I think that's the end.");
            process.exit(0);
        } else {
            // Still has episode, call create.
            create(data.current_episode + 1);
        }
        
        // Call main again.
        main();
        return;
    }
    
    const fileName = `${episodeWithPad}_${frameWithPad}.jpeg`; // Frame file format: XX_YYYY.jpeg
    const framePath = `${__dirname}/frames/${fileName}`;
    
    const formData = new FormData();
    const sxcuData = new FormData();
    
    // For sxcu
    const file = fs.readFileSync(framePath);
    sxcuData.append(sxcu.FileFormName, new Blob([file]), fileName);
    if (sxcu.Arguments) for (const prop in sxcu.Arguments) {
        sxcuData.append(prop, sxcu.Arguments[prop]);
    }
    
    // For facebook
    formData.append("access_token", process.env.TOKEN); // Facebook Page access token
    formData.append("published", "false"); // "false" for debugging
    
    try {
        console.log(`Episode ${episodeWithPad} - Frame ${current_frame}/${data.max_frame} is publishing...`);
        
        const sxRes = await fetch(sxcu.RequestURL, {
            method: sxcu.RequestMethod || "POST",
            body: sxcuData
        }).then(r => r.json());
        
        // TODO: Remove after debug
        console.log(sxRes);
        
        if (!sxRes.url) throw new Error("No image url.");
        const caption = `Episode ${episodeWithPad} - Frame ${current_frame} out of ${data.max_frame}\n` // Main caption
            + `#ESSFIOEPS${data.current_episode}`; // Unique tag
        
        formData.append("url", sxRes.url + ".jpeg");
        formData.append("caption", caption);
        
        const res = await fetch(`https://graph.facebook.com/v18.0/me/photos`, {
            body: formData,
            method: "post"
        }).then(r => r.json());
        if (res.error) throw new Error(res.error.message);
        
        // TODO: Remove after debug
        console.log(res);
        console.log(formData);
        
        console.log(`Episode ${episodeWithPad} - Frame ${current_frame}/${data.max_frame} published!`);
        
        // Update data
        current_frame++;
        data.current_frame = current_frame;
        fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
        
        // Delete the frame
        fs.unlinkSync(framePath);
    } catch (err) {
        console.error(err);
    }
}